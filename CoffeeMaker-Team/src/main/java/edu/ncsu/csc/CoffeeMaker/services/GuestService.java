package edu.ncsu.csc.CoffeeMaker.services;

import java.util.Random;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import edu.ncsu.csc.CoffeeMaker.models.Customer;
import edu.ncsu.csc.CoffeeMaker.models.enums.Role;
import edu.ncsu.csc.CoffeeMaker.repositories.CustomerRepository;

/**
 * The GuestService is used to handle CRUD operations on the Guest model.
 * In addition to all functionality from `Service`, we also have functionality
 * for retrieving a single Guest by name.
 *
 * @author Kai Presler-Marshall
 *
 */
@Component
@Transactional
public class GuestService extends Service<Customer, Long> {

    /**
     * PasswordEncoder, to be autowired in by Spring and provide password salt
     * security functionality on User authentication. This will ensure for a
     * safer user logging experience, and provide security for user data.
     */
    @Autowired
    private PasswordEncoder    passwordEncoder;

    /**
     * GuestRepository, to be autowired in by Spring and provide CRUD
     * operations on Guest model.
     */
    @Autowired
    private CustomerRepository guestRepository;

    @Override
    protected JpaRepository<Customer, Long> getRepository () {
        return guestRepository;
    }

    /**
     * Characters to be used in random password generation upon creation of a
     * guest account
     */
    private static final String CHARACTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 ";

    /**
     * Find a Guest with the provided username
     *
     * @param username
     *            username of the Guest to find
     * @return found Guest, null if none
     */
    public Customer findByUsername ( final String username ) {
        return guestRepository.findByUsername( username );
    }

    public Customer createGuestAccount () {
        // create the username
        final long number = guestRepository.countByRolesContaining( Role.GUEST );
        final String username = "guest" + String.valueOf( number );

        if ( null != this.findByUsername( username ) ) {
            return null;
        }

        // generate password
        final String password = generateRandomString( 8 );

        // create guest account
        final Customer guest = new Customer( username, password );
        // create guest return object
        final Customer guestRet = new Customer( username, password );

        // add guest role
        guest.addRole( Role.GUEST );
        guestRet.addRole( Role.GUEST );

        // encode the guest password
        guest.setPassword( passwordEncoder.encode( guest.getPassword() ) );

        // save to the repository
        guestRepository.save( guest );

        return guestRet;
    }

    /**
     * Checks whether the User is in the database or not
     *
     * @param User
     *            the user to check
     */
    public boolean authenticateUser ( final String username, final String password ) {
        final Customer guest = guestRepository.findByUsername( username );

        // return ( guest != null && password.equals( guest.getPassword() ) );
        return ( guest != null && passwordEncoder.matches( password, guest.getPassword() ) );
    }

    /**
     * Generates a random string of chars from CHARACTERS with a specified
     * length
     *
     * Generated by ChatGPT
     *
     * @param length
     *            the length of the string
     * @return string with random chars in CHARACTERS with the given length
     */
    public static String generateRandomString ( final int length ) {
        final Random random = new Random();
        final StringBuilder sb = new StringBuilder( length );

        for ( int i = 0; i < length; i++ ) {
            final int randomIndex = random.nextInt( CHARACTERS.length() );
            final char randomChar = CHARACTERS.charAt( randomIndex );
            sb.append( randomChar );
        }

        return sb.toString();
    }
}
